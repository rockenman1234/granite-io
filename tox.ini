# SPDX-License-Identifier: Apache-2.0

[tox]
envlist = ruff, lint, unit, examples, readme, notebooks, vllm-cpu-unit, vllm-cpu-notebooks
minversion = 4.4

[testenv]
description = run tests (unit, unitcov)
extras =
    dev
    vllm
package = wheel
wheel_build_env = pkg
allowlist_externals = bash
passenv =
    MODEL_NAME
    OPENAI_*
    WATSONX_*
setenv =
    HF_HOME=~/.cache/huggingface
commands =
    {envpython} -m nltk.downloader punkt_tab # Download punkt tokenizer
    record: {envpython} -m pytest -v -rA {posargs:--record-mode=rewrite tests}
    unit: {envpython} -m pytest -v -rA {posargs: --record-mode=none --block-network tests}
    unitcov: {envpython} -W error::UserWarning -m pytest -v -rA --record-mode=none --block-network --cov=granite_io --cov-report term --cov-report=html:coverage-{env_name} --cov-report=xml:coverage-{env_name}.xml --html=durations/{env_name}.html {posargs:tests}

[testenv:py3]
basepython = python3.12

[testenv:unit]
basepython = {[testenv:py3]basepython}

[testenv:unitcov]
basepython = {[testenv:py3]basepython}

[testenv:lint]
description = lint with pylint
basepython = {[testenv:py3]basepython}
extras =
    dev
commands =
    {basepython} -m pylint --load-plugins pylint_pydantic src/granite_io/ tests/

[testenv:ruff]
description = lint and format check with ruff
basepython = {[testenv:py3]basepython}
extras =
    dev
commands =
    ruff check .
    ruff format --diff .
    isort --check --diff src tests examples

[testenv:fix]
description = reformat and fix violations with ruff
basepython = {[testenv:py3]basepython}
deps = {[testenv:ruff]deps}
commands =
    ruff check {posargs:--fix} .
    ruff format .
    isort src tests examples
    isort --check src tests examples

[testenv:examples]
description = Run examples code
basepython = {[testenv:py3]basepython}
extras = 
    openai
    litellm
    voting
commands =
    {envpython} -m nltk.downloader punkt_tab # Download punkt tokenizer
    bash -c "for i in examples/*.py; do echo Run $i && {envpython} $i;done"

[testenv:notebooks]
description = Test notebooks
basepython = {[testenv:py3]basepython}
extras =
    notebook
    aiohttp
    transformers
commands =
    jupyter execute notebooks/io.ipynb  # --output='temp_{notebook_name}_test_output'
    jupyter execute notebooks/voting.ipynb  # --output='temp_{notebook_name}_test_output'

[testenv:readme]
description = tests for the readme
basepython = {[testenv:py3]basepython}
extras = 
    openai
commands =
    {envpython} -m nltk.downloader punkt_tab # Download punkt tokenizer
    bash -c "echo test the README code snippet"
    bash -c "sed -n '/\x60\x60\x60py/,/\x60\x60\x60/p' README.md | sed '1d;$ d' | {envpython} -"

[testenv:vllm-cpu-unit]
description = Run unit tests with CPU-only vLLM
basepython = {[testenv:py3]basepython}
extras =
    dev-cpu
    retriever
passenv =
    {[testenv]passenv}
    VLLM_VERSION
    CACHE_DIR
    FORCE_REBUILD
setenv =
    {[testenv]setenv}
    # CPU-specific vLLM environment variables
    VLLM_CPU_KVCACHE_SPACE=8
    VLLM_CPU_OMP_THREADS_BIND=auto
    VLLM_CPU_NUM_OF_RESERVED_CPU=1
allowlist_externals = 
    {[testenv]allowlist_externals}
    scripts/build-vllm-cpu.sh
commands_pre =
    # Build and install CPU vLLM wheel
    scripts/build-vllm-cpu.sh
    # Install the built wheel (the script returns the path)
    bash -c "WHEEL_PATH=$(scripts/build-vllm-cpu.sh) && {envpython} -m pip install $WHEEL_PATH --force-reinstall"
commands =
    {envpython} -m nltk.downloader punkt_tab # Download punkt tokenizer
    # Run tests that specifically use vLLM
    {envpython} -m pytest -v -rA {posargs: --record-mode=none --block-network -k "vllm or lora" tests}

[testenv:vllm-cpu-notebooks]
description = Test notebooks with CPU-only vLLM (RAG notebook)
basepython = {[testenv:py3]basepython}
extras =
    notebook
    aiohttp
    transformers
    retriever
    vllm-cpu
passenv =
    {[testenv:vllm-cpu-unit]passenv}
setenv =
    {[testenv:vllm-cpu-unit]setenv}
allowlist_externals = 
    {[testenv:vllm-cpu-unit]allowlist_externals}
    jupyter
commands_pre =
    {[testenv:vllm-cpu-unit]commands_pre}
commands =
    # Test RAG notebook specifically as it uses vLLM with LoRA
    jupyter execute notebooks/rag.ipynb --kernel_name=python3

[gh]
python =
    3.12 = 3.12-{unitcov}
    3.11 = 3.11-{unitcov}
    3.10 = 3.10-{unitcov}
